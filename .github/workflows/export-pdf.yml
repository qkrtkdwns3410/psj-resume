name: Export PDFs and Deploy

on:
  push:
    branches: ["main", "master"]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build-and-export:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit --no-fund

      - name: Build site (webpack)
        run: npm run build

      - name: Setup Chrome for Puppeteer
        run: |
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable

      - name: Export PDFs with Puppeteer
        run: npm run export-pdf
        env:
          PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: true
          PUPPETEER_EXECUTABLE_PATH: /usr/bin/google-chrome-stable

      - name: List generated PDF files
        run: |
          echo "📄 Generated PDF files:"
          ls -la ./dist/*.pdf
          echo ""
          echo "📊 PDF file count:"
          ls ./dist/*.pdf | wc -l

      - name: Copy PDFs to dist directory for deployment
        run: |
          # PDF 파일들을 dist 폴더에 복사 (이미 있지만 확실히 하기 위해)
          cp ./dist/*.pdf ./dist/
          echo "📄 PDFs in dist directory:"
          ls -la ./dist/*.pdf

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './dist'

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build-and-export
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
